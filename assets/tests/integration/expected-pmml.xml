<PMML>
  <!-- 
    The data dictionary defines all the variables which are not derived from other variables, which in the variable details sheet are all the start
    variables.
  -->
  <DataDictionary numberOfFields="1">
    <!-- 
      Every start variable should be represented by a DataField node. 
      Attributes:
      name: Comes from the variableStart column
      displayName: Comes from the variableStartShortLabel column
      optype: Is set using the fromType column.
              cat is converted to categorical
              cont is converted to continuous
      dataType: Is set using the fromType column
                cat is converted to integer
                cont is converted to float
    -->
    <DataField name="RACA_6A" displayName="Needs help - preparing meals" optype="categorical" dataType="integer">
      <!--
        An extension node is added for the variableStartLabel column since
        PMML does not have an attribute to represent it.
        Attributes:
        name: Set to variableStartLabel
        value: Set to the value of the variableStartLabel column

        More info on Extension nodes http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension
      -->
      <Extension name="variableStartLabel" value="Because of any condition or health problem, do you need the help of another person in preparing meals?" />
      <!-- 
        If the start variable is categorical, then each category
        should be represented as a Value node. Look at the values of the recFrom
        columns for this start variable to figure out all the categories.
        Attributes:
        value: Set to the value of the recFrom column
        displayName: Set to the value of the catLabel column
        property: Set using the value of the recTo column
                  If its NA::a then its invalid
                  If its Na::b then its missing
                  Otherwise its valid
      -->
      <Value value="1" displayName="Yes" property="valid"></Value>
      <Value value="2" displayName="No" property="valid"></Value>
      <Value value="6" displayName="not applicable" property="invalid"></Value>
      <Value value="7" displayName="don't know(7)" property="missing"></Value>
      <Value value="8" displayName="refusal(8)" property="missing"></Value>
      <Value value="9" displayName="not stated(9)" property="missing"></Value>
    </DataField>
  </DataDictionary>
  <!--
    Defines the transformations that can be used by all other models in a PMML
    file. For our case it will be used to define how to transform a start
    variable into a variable. 
  -->
  <TransformationDictionary>
    <!--
      Each variable in the variable column should have a DerivedField node
      attached to it. 
      Attriubutes:
      name: Set to the value in the variable column
      displayName: Set to the label column in the variables sheet
      optype: Is set using the toType column
      dataType: Is set using the fromType column

      An extension node is added for the labelLong column in the variables
      sheet.
      Attributes:
      name: Set to labelLong
      value: Set to the value of the labelLong field in the variables sheet

      An extensions node is added for the units column
      Attributes:
      name: Set to units
      value: Set to the value of the units column

      A node is added to represent how to transform the start variable
      to the variable column.

      For eg., of this look at the following resources
      http://dmg.org/pmml/v4-4/Transformations.html#xsdGroup_EXPRESSION
      http://dmg.org/pmml/v4-4/Functions.html
      http://dmg.org/pmml/v4-4/BuiltinFunctions.html

      For eg., for ADL_01 using the recFrom and recTo columns, the Apply
      node is used to represent the transformations,
      if(RACA_6A == 1) {
        ADL_01 = 1
      } elseif(RACA_6A == 2) {
        ADL_01 = 2
      } elseif(RACA_6A == 6) {
        ADL_01 = NA
      } elseif(RACA_6A >= 7 && RACA_6A <= 9) {
        ADL_01 = NA
      } else {
        ADL_01 = NA
      }
    -->
    <DerivedField name="ADL_01" displayName="Help preparing meals" optype="categorical" dataType="integer">
      <Extension name="labelLong" value="Needs help - preparing meals" />
      <Extension name="units" value="N/A" />
      <Apply function="if">
        <Apply function="equals">
          <FieldRef field="RACA_6A"/>
          <Constant dataType="integer">1</Constant>
        </Apply>
        <Constant dataType="integer">1</Constant>
        <Apply function="if">
          <Apply function="equals">
            <FieldRef field="RACA_6A"/>
            <Constant dataType="integer">2</Constant>
          </Apply>
          <Constant dataType="integer">2</Constant>
          <Apply function="if">
            <Apply function="equals">
              <FieldRef field="RACA_6A"/>
              <Constant dataType="integer">6</Constant>
            </Apply>
            <Constant missing="true"/>
            <Apply function="if">
              <Apply function="and">
                <Apply function="or">
                  <Apply function="greaterThan">
                    <FieldRef="RACA_61" />
                    <Constant dataType="integer">7</Constant>
                  </Apply>
                  <Apply function="equals">
                    <FieldRef="RACA_61" />
                    <Constant dataType="integer">7</Constant>
                  </Apply>
                </Apply>
                <Apply function="or">
                  <Apply function="lessThan">
                    <FieldRef="RACA_61" />
                    <Constant dataType="integer">9</Constant>
                  </Apply>
                  <Apply function="equals">
                    <FieldRef="RACA_61" />
                    <Constant dataType="integer">9</Constant>
                  </Apply>
                </Apply>
              </Apply>
              <Constant missing="true"/>
              <Constant missing="true"/>
            </Apply>
          </Apply>
        </Apply>
      </Apply>
      <!--
        Similar to the Value node defined for the RACA_6A data field
        A value node is added for each of the recTo values for this variable.
        recTo values which are NA::a or NA::b are ignored
        Attributes:
        value: Set to the value of the recTo column
        displayValue: Set ot eh value of the catLabel column
      -->
      <Value value="1" displayValue="Yes">
        <!-- 
          An extension node is added for the catLabelLong column
          Attributes:
          name: Set to catLabelLong
          value: Set to the value of the catLabelLong column
        -->
        <Extension name="catLabelLong" value="Yes" />
      </Value>
      <Value value="2" displayValue="No">
        <Extension name="catLabelLong" value="Yes" />
      </Value>
    </DerivedField>
  </TransformationDictionary>
</PMML>
